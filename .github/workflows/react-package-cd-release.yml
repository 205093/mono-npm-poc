name: react-package-cd-release

on:
  pull_request:
    types: [closed]

jobs:
  parsebranchname:
    if: github.event.pull_request.merged
    name: Parse version and module from branchname
    runs-on: ubuntu-latest
    outputs:
      module: ${{ env.MODULE }}
      version: ${{ env.VERSION }}
    steps:
      - name: Split branchname into module and version
        run: |
          #TAG=${{ github.event.pull_request.head.ref }}
          BRANCHNAME=release/al-spinner/0.0.11
          MODULEANDVERSION=${BRANCHNAME#*/}
          MODULE=${MODULEANDVERSION%%/*}
          VERSION=${MODULEANDVERSION##*/}
          echo module: $MODULE
          echo version: $VERSION
          echo MODULE=$MODULE >> $GITHUB_ENV
          echo VERSION=$VERSION >> $GITHUB_ENV

  check:
    needs: parsebranchname
    name: Check if its a react module release
    runs-on: ubuntu-latest
    outputs:
      isreactmodule: ${{ steps.check_files.outputs.files_exists }}
    steps:
      - run: |
          echo module: ${{ needs.parsebranchname.outputs.module }}
          echo version: ${{ needs.parsebranchname.outputs.version }}

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.target_commitish }}

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "al-react-components/${{ needs.parsebranchname.outputs.module }}/package.json"

  buildrelease:
    needs: [parsebranchname, check]
    name: Build release
    if: needs.check.outputs.isreactmodule == 'true'
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo module: ${{ needs.parsebranchname.outputs.module }}
          echo version: ${{ needs.parsebranchname.outputs.version }}

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.target_commitish }}

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "yarn"
          cache-dependency-path: "al-react-components/yarn.lock"
          registry-url: 'https://npm.pkg.github.com'
          scope: '@205093'
          always-auth: true

      - name: Configure git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false
          custom_tag : ${{ needs.parsebranchname.outputs.module }}/v${{ needs.parsebranchname.outputs.version }}
      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with: 
          # body_path: ${{ github.workspace }}-CHANGELOG.txt
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          # token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        # env:
        #   GITHUB_REPOSITORY: my_gh_org/my_gh_repo

      # - name: Install and build
      #   run: |
      #     cd al-react-components
      #     yarn
      #     yarn workspaces run build
      #     cd ${{ needs.parsetag.outputs.module }}
      #     npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Output event for debug1
  #       run: echo "${{ toJSON(github.event) }}"

  #     - name: Output event for debug2
  #       run: echo "${{ toJSON(github.event.pull_request) }}"

  #     - name: Output event for debug3
  #       run: echo "${{ toJSON(github.event.pull_request.merged) }}"

  #     - name: Output event for debug4
  #       run: echo "${{ toJSON(github.event.pull_request.head.ref) }}"

  #     - uses: actions/checkout@v3

  #     - run: |
  #         cd al-react-components
  #         yarn
  #         yarn workspaces run build

# jobs:
#   parsetag:
#     name: Parse version and module from tag
#     runs-on: ubuntu-latest
#     outputs:
#       module: ${{ env.MODULE }}
#       version: ${{ env.VERSION }}
#     steps:
#       - name: Split tagname into module and version
#         run: |
#           TAG=${{ github.event.release.tag_name }}
#           # TAG=al-spinner/v1.2.3
#           MODULE=${TAG%%/*}
#           VERSION=${TAG##*/v}
#           echo module: $MODULE
#           echo version: $VERSION
#           echo MODULE=$MODULE >> $GITHUB_ENV
#           echo VERSION=$VERSION >> $GITHUB_ENV

#   check:
#     needs: parsetag
#     name: Check if its a react module release
#     runs-on: ubuntu-latest
#     outputs:
#       isreactmodule: ${{ steps.check_files.outputs.files_exists }}
#     steps:
#       - run: |
#           echo module: ${{ needs.parsetag.outputs.module }}
#           echo version: ${{ needs.parsetag.outputs.version }}

#       - uses: actions/checkout@v3
#         with:
#           ref: ${{ github.event.release.target_commitish }}

#       - name: Check file existence
#         id: check_files
#         uses: andstor/file-existence-action@v2
#         with:
#           files: "al-react-components/${{ needs.parsetag.outputs.module }}/package.json"

#   buildrelease:
#     needs: [parsetag, check]
#     name: Build release
#     if: needs.check.outputs.isreactmodule == 'true'
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3
#         with:
#           ref: ${{ github.event.release.target_commitish }}

#       - name: Use Node.js 18.x
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18.x
#           cache: "yarn"
#           cache-dependency-path: "al-react-components/yarn.lock"
#           registry-url: 'https://npm.pkg.github.com'
#           scope: '@205093'
#           always-auth: true

#       - run: git config --global user.name "GitHub CD bot"
#       - run: git config --global user.email "github-cd-bot@al-bank.io"

#       - name: Install and build
#         run: |
#           cd al-react-components
#           yarn
#           yarn workspaces run build
#           cd ${{ needs.parsetag.outputs.module }}
#           #yarn config set version-tag-prefix "${{ needs.parsetag.outputs.module }}/v"
#           yarn config set version-git-message "release: react component ${{ needs.parsetag.outputs.module }} v%s"
#           yarn version --new-version ${{ needs.parsetag.outputs.version }}
#           npm publish
#         env:
#           NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - run: git push
#         env:
#           # The secret is passed automatically. Nothing to configure.
#           github-token: ${{ secrets.GITHUB_TOKEN }}